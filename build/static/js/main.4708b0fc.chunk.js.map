{"version":3,"sources":["components/PageHeader.js","authorization.js","components/EditMap.js","components/ViewMap.js","components/About.js","components/Archive.js","components/Home.js","components/Research.js","components/PageFooter.js","index.js"],"names":["PageHeader","props","id","href","className","Component","Endpoint","Token","authLink","setContext","_","headers","authorization","clientCache","InMemoryCache","clientLink","HttpLink","uri","client","ApolloClient","cache","link","concat","editPinKey","mapPins","Pin","x","y","this","key","String","name","description","category","otherText","EditMap","state","mapName","mapCreator","mapDescription","editName","editDescription","editTag","editOtherText","written","e","setState","nativeEvent","offsetX","offsetY","preventDefault","length","newPin","push","pin","style","left","top","onClick","forEach","p","target","value","filter","map","s","l","i","gql","type","autoComplete","placeholder","onChange","handleMapNameChange","bind","handleMapCreatorChange","handleMapDescriptionChange","alt","onMouseMove","src","drawPin","required","handleNameChange","handleDescriptionChange","handleTagChange","getOTClass","handleOtherTextChange","handleRemovePin","handleEditSubmit","data","mutation","handleMapSave","saveMap","error","getSaveButtonClass","printSavePreface","JSON","stringify","replace","printSaveSuffex","window","location","split","ViewMap","pinName","pinDescription","pinCategory","pinOtherText","pins","query","loading","message","creatorName","createdAt","pointList","coordinates","getCategory","About","Archive","page","size","backClass","Array","from","mapList","m","getForthClass","creator","mapId","Home","pinCreator","pinMapId","Set","add","pinArray","getPinInfoClassName","Research","PageFooter","App","pageText","pageContent","splited","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4708b0fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../css/header.css';\r\n\r\n\r\n// Component class\r\nexport default class PageHeader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    };\r\n\r\n  render() {\r\n    return <div id=\"headerContainer\">\r\n       <div id=\"headerTitle\"><a href=\"./\" id=\"titleLink\">The College Hill Digital Cognitive Mapping Project</a></div>\r\n      <div id=\"headerLinks\">\r\n      <a href=\"./page=about\" className=\"headerLink\">About</a>\r\n        <a href=\"./page=editmap\" className=\"headerLink\">Contribute a Map</a>\r\n        <a href=\"./page=archive\" className=\"headerLink\">Map Archive</a>\r\n        <a href=\"./page=research\" className=\"headerLink\">Research</a>\r\n      </div>\r\n    </div>;\r\n  }\r\n}","//graphql endpoint (w/ authorization headers)\r\nconst Endpoint = \"https://dcmp-server.herokuapp.com/\";\r\nconst Token = \"editing\";\r\n\r\nexport { Token, Endpoint };\r\n\r\n","import React, { Component } from 'react';\r\nimport { ApolloClient } from 'apollo-boost';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { ApolloProvider, Mutation } from 'react-apollo';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { setContext } from 'apollo-link-context';\r\nimport { Token, Endpoint } from '../authorization';\r\nimport gql from \"graphql-tag\";\r\nimport '../css/editmap.css';\r\n\r\n// Setup Client\r\nconst authLink = setContext((_, { headers }) => {\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: Token ? `${Token}` : ''\r\n    },\r\n  };\r\n});\r\nconst clientCache = new InMemoryCache();\r\nconst clientLink = new HttpLink({\r\n  uri: Endpoint,\r\n});\r\nconst client = new ApolloClient({\r\n  cache: clientCache,\r\n  link: authLink.concat(clientLink),\r\n});\r\n\r\n\r\nlet editPinKey = '';\r\nlet mapPins = [];\r\n\r\n// internal pin class\r\nclass Pin {\r\n  constructor(x, y) {\r\n    this.key = `pin:x${String(x)},y${String(y)}`;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.name = \"\";\r\n    this.description = \"\";\r\n    this.category = \"\";\r\n    this.otherText = \"\";\r\n  }\r\n}\r\n\r\n/**\r\n * gets class name of pin content container\r\n */\r\nfunction getContentClassName() {\r\n  if (editPinKey === '') {\r\n    return \"invisible\";\r\n  } else {\r\n    return \"pinContent\";\r\n  }\r\n}\r\n\r\n// Component class\r\nexport default class EditMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      x: 0,\r\n      y: 0,\r\n      mapName: \"\",\r\n      mapCreator: \"\",\r\n      mapDescription: \"\",\r\n      editName: \"\",\r\n      editDescription: \"\",\r\n      editTag: \"\",\r\n      editOtherText: \"\",\r\n      written: false,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets internal x and y coordinates according to mouse position\r\n   * @param e<event>mouseMove event\r\n   */\r\n  onMouseMove(e) {\r\n    this.setState({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Adds a new pin if a user isn't already editing one\r\n   * @param e<event>click event\r\n   */\r\n  onClick(e) {\r\n    if (editPinKey === '' && !this.state.written && mapPins.length < 51) {\r\n      let newPin = new Pin(this.state.x, this.state.y);\r\n      mapPins.push(newPin);\r\n      editPinKey = newPin.key;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws a given pin to the map\r\n   * @param pin<Pin>The pin to be drawn\r\n   */\r\n  drawPin(pin) {\r\n    return <div key={pin.key}\r\n      className=\"mapPin\"\r\n      style={{ left: String(pin.x - 6) + \"px\", top: String(pin.y - 6) + \"px\", }}>\r\n      <button\r\n        className=\"mapPinMarker\"\r\n        onClick={() => {\r\n          if (editPinKey === '' && !this.state.written) {\r\n            editPinKey = pin.key;\r\n            mapPins.forEach(p => {\r\n              if (p.key === editPinKey && mapPins.length > 0 && !this.state.written) {\r\n                this.setState({ editName: p.name });\r\n                this.setState({ written: true });\r\n              }\r\n            });\r\n          }\r\n        }} />\r\n      <div className=\"mapPinName\">{pin.name}</div>\r\n    </div>;\r\n  }\r\n\r\n  handleMapNameChange(e) {\r\n    this.setState({ mapName: e.target.value });\r\n  }\r\n\r\n  handleMapCreatorChange(e) {\r\n    this.setState({ mapCreator: e.target.value });\r\n  }\r\n\r\n  handleMapDescriptionChange(e) {\r\n    this.setState({ mapDescription: e.target.value });\r\n  }\r\n\r\n  /**\r\n   * Handles change to the pin name input\r\n   * @param e<event>input\r\n   */\r\n  handleNameChange(e) {\r\n    this.setState({ editName: e.target.value });\r\n  }\r\n\r\n  /**\r\n   * Handles change to the pin description input\r\n   * @param e<event>input\r\n   */\r\n  handleDescriptionChange(e) {\r\n    this.setState({ editDescription: e.target.value });\r\n  }\r\n\r\n  handleTagChange(e) {\r\n    if (e.target.value !== 'none') {\r\n      this.setState({ editTag: e.target.value });\r\n    }\r\n  }\r\n\r\n  handleOtherTextChange(e) {\r\n    if (e.target.value !== 'none') {\r\n      this.setState({ editOtherText: e.target.value });\r\n    }\r\n  }\r\n\r\n  handleRemovePin(e) {\r\n    this.setState({ editName: \"\" });\r\n    this.setState({ editDescription: \"\" });\r\n    mapPins = mapPins.filter(p => p.key !== editPinKey);\r\n    editPinKey = \"\";\r\n  }\r\n\r\n  /**\r\n   * Handles submition of a pin edit\r\n   * @param e<event>onClick event\r\n   */\r\n  handleEditSubmit(e) {\r\n    if (this.state.editName !== \"\") {\r\n      mapPins = mapPins.map(p => {\r\n        if (p.key === editPinKey) {\r\n          p.name = this.state.editName;\r\n          p.description = this.state.editDescription;\r\n          p.category = this.state.editTag;\r\n          p.otherText = this.state.editOtherText;\r\n        }\r\n        return p;\r\n      });\r\n      this.setState({ editName: \"\", editDescription: \"\", editTag: \"\", editOtherText: \"\" })\r\n      editPinKey = \"\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles a map save\r\n   * @param e<event>onClick event\r\n   * @return <String>\r\n   */\r\n  handleMapSave() {\r\n    let s = 'mutation { saveMap(';\r\n    if (this.state.mapName !== \"\") {\r\n      s = s + ` mapName: \"${this.state.mapName}\"`;\r\n    }\r\n    if (this.state.mapCreator !== \"\") {\r\n      s = s + ` creatorName: \"${this.state.mapCreator}\"`;\r\n    }\r\n    if (this.state.mapDescription !== \"\") {\r\n      s = s + ` description: \"${this.state.mapDescription}\"`;\r\n    }\r\n    s = s + ' points: [';\r\n    let l = mapPins;\r\n    let i = 0;\r\n    while (i < l.length) {\r\n      const p = l[i];\r\n      if (p.name === '') {\r\n        s = s + `{ name: \"placeholder\" coordinates: [${p.x}, ${p.y}]`;\r\n      } else {\r\n        s = s + `{ name: \"${p.name}\" coordinates: [${p.x}, ${p.y}]`;\r\n      }\r\n      if (p.description !== \"\") {\r\n        s = s + ` description: \"${p.description}\"`;\r\n      }\r\n      if (p.category !== \"\") {\r\n        s = s + ` category: \"${p.category}\"`;\r\n      }\r\n      if (p.otherText !== \"\") {\r\n        s = s + ` otherText: \"${p.otherText}\"`;\r\n      }\r\n      if (this.state.mapCreator !== \"\") {\r\n        s = s + ` creatorName: \"${this.state.mapCreator}\"`;\r\n      }\r\n      s = s + ' }';\r\n      if (i < l.length - 1) {\r\n        s = s + ', ';\r\n      }\r\n      i++;\r\n    }\r\n    s = s + ' ])}';\r\n    return gql(s);\r\n  }\r\n\r\n  getSaveButtonClass() {\r\n    if (this.state.written) {\r\n      return \"invisible\";\r\n    } else {\r\n      return \"saveMapButton\";\r\n    }\r\n  }\r\n\r\n  printSavePreface() {\r\n    if (this.state.written) {\r\n      return 'Your map was successfuly saved! Map ID: '\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  printSaveSuffex() {\r\n    if (this.state.written) {\r\n      let s = '. Thank you for your contribution';\r\n      if (this.state.mapCreator !== '') {\r\n        s = s + \" \" + this.state.mapCreator;\r\n      }\r\n      s = s + '!';\r\n      return s;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  getOTClass() {\r\n    if (this.state.editTag === 'OTHER') {\r\n      return 'show';\r\n    } else {\r\n      return 'invisible';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * renders the component\r\n   */\r\n  render() {\r\n    return <div id=\"contentContainer\">\r\n      <div id=\"editCreator\">\r\n        <div id=\"mapInfoContainer\">\r\n          <div id=\"mapInputs\">\r\n            <input id=\"mapNameInput\" type=\"text\" className=\"topInput\" autoComplete=\"off\"\r\n              placeholder=\"Name of your map (optional)\" onChange={this.handleMapNameChange.bind(this)}></input>\r\n            <input id=\"creatorNameInput\" type=\"text\" className=\"topInput\" autoComplete=\"off\"\r\n              placeholder=\"Your name (optional)\" onChange={this.handleMapCreatorChange.bind(this)}></input>\r\n          </div>\r\n          <div id=\"textAreaContainer\">\r\n          <textarea id=\"mapDescriptionField\" autoComplete=\"off\"\r\n            placeholder=\"A description of your map (optional)\" onChange={this.handleMapDescriptionChange.bind(this)}></textarea>\r\n        </div>\r\n          </div>\r\n      </div>\r\n      <div id=\"editMapContainer\">\r\n        <div id=\"mapImageContainer\">\r\n          <img id=\"mapImage\"\r\n            alt=\"a map\"\r\n            onMouseMove={this.onMouseMove.bind(this)}\r\n            onClick={this.onClick.bind(this)}\r\n            src={process.env.PUBLIC_URL + '/collegeHillMap2.png'} />\r\n          {mapPins.map(pin => this.drawPin(pin))}\r\n        </div>\r\n      </div>\r\n      <div id=\"editPin\">\r\n        <div className={getContentClassName()}>\r\n          <div className=\"editPinNameContainer\">\r\n            <input className=\"editPinInput\" type=\"text\" required autoComplete=\"off\" placeholder=\"Name of this point\" value={this.state.editName} onChange={this.handleNameChange.bind(this)} />\r\n          </div>\r\n          <div className=\"editPinDescriptionContainer\">\r\n            <textarea className=\"editPinField\" autoComplete=\"off\" placeholder=\"Description of this point (optional)\" type=\"text\" value={this.state.editDescription} onChange={this.handleDescriptionChange.bind(this)} />\r\n          </div>\r\n          <div className=\"editPinTagContainer\">\r\n            <select id=\"pinTag\" onChange={this.handleTagChange.bind(this)}>\r\n              <option value=\"none\" className=\"descriptionOption\">Category of this point (optional)</option>\r\n              <option value=\"ART\">Art</option>\r\n              <option value=\"PUBLICSPACE\">Public Space or Building</option>\r\n              <option value=\"RESIDENCE\">Residence</option>\r\n              <option value=\"SCHOOL\">School or Educational Institution</option>\r\n              <option value=\"BUISNESS\">Shop or other Buisness</option>\r\n              <option value=\"WORKPLACE\">Workplace</option>\r\n              <option value=\"OTHER\">Other</option>\r\n            </select>\r\n          </div>\r\n          <div className={this.getOTClass()}>\r\n            <input className=\"editPinInput\" type=\"text\" autoComplete=\"off\" \r\n            placeholder=\"Category name (optional)\" value={this.state.editOtherText} onChange={this.handleOtherTextChange.bind(this)} />\r\n          </div>\r\n          <div className=\"editPinButtonsContainer\">\r\n            <button className=\"removePinButton bottomButton\" onClick={this.handleRemovePin.bind(this)}>Remove Pin</button>\r\n            <button className=\"savePinButton bottomButton\" onClick={this.handleEditSubmit.bind(this)}>Save Pin</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>{this.state.data}</div>\r\n      <ApolloProvider client={client}>\r\n        <Mutation mutation={this.handleMapSave()}>\r\n          {(saveMap, { data, error }) => (\r\n            <div id=\"saveMap\">\r\n              <button className={`${this.getSaveButtonClass()} bottomButton`} onClick={e => {\r\n                if (editPinKey === \"\" && mapPins.length > 0) {\r\n                  e.preventDefault();\r\n                  this.setState({ written: true });\r\n                  saveMap();\r\n                }\r\n              }}>\r\n                Save Map</button>\r\n              <div className=\"saveMessage\">\r\n                {this.printSavePreface()}\r\n                <a href={(\"./viewmap:\" + JSON.stringify(data)).replace('undefined', '').replace('{\"saveMap\":\"', '').replace('\"}', '')} \r\n                className=\"saveLink\"> {(\"\" + JSON.stringify(data)).replace('undefined', '').replace('{\"saveMap\":\"', '').replace('\"}', '')}</a>\r\n                {this.printSaveSuffex()}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </Mutation>\r\n      </ApolloProvider>\r\n    </div>;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { ApolloClient } from 'apollo-boost';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { ApolloProvider, Query } from 'react-apollo';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { setContext } from 'apollo-link-context';\r\nimport { Token, Endpoint } from '../authorization';\r\nimport gql from \"graphql-tag\";\r\nimport '../css/viewmap.css';\r\n\r\n// Setup Client\r\nconst authLink = setContext((_, { headers }) => {\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: Token ? `${Token}` : ''\r\n    },\r\n  };\r\n});\r\nconst clientCache = new InMemoryCache();\r\nconst clientLink = new HttpLink({\r\n  uri: Endpoint,\r\n});\r\nconst client = new ApolloClient({\r\n  cache: clientCache,\r\n  link: authLink.concat(clientLink),\r\n});\r\n\r\n// internal pin class\r\nclass Pin {\r\n  constructor(x, y, name, description, category, otherText) {\r\n    this.key = `pin:x${String(x)},y${String(y)}`;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.name = name;\r\n    this.description = description;\r\n    this.category = category;\r\n    this.otherText = otherText\r\n  }\r\n}\r\n\r\nconst id = window.location.href.split('viewmap:')[1];\r\n\r\n// Component class\r\nexport default class ViewMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pinName: \"\",\r\n      pinDescription: \"\",\r\n      pinCategory: \"\",\r\n      pinOtherText: \"\",\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Draws a given pin to the map\r\n   * @param pin<Pin>The pin to be drawn\r\n   * @param pins<[Pin]>all of the pins!\r\n   */\r\n  drawPin(pin, pins) {\r\n    return <div key={pin.key}\r\n      className=\"mapPin\"\r\n      style={{ left: String(pin.x - 6) + \"px\", top: String(pin.y - 6) + \"px\", }}>\r\n      <button className=\"mapPinMarker\"\r\n        onClick={() => {\r\n          pins.forEach(p => {\r\n            if (p.key === pin.key) {\r\n              this.setState({ pinName: p.name });\r\n              this.setState({ pinDescription: p.description });\r\n              this.setState({ pinCategory: p.category });\r\n              this.setState({ pinOtherText: p.otherText });\r\n            }\r\n          });\r\n        }} />\r\n      <div className=\"mapPinName\">{pin.name}</div>\r\n    </div>;\r\n  }\r\n\r\n  getPinInfoClassName() {\r\n    if (this.state.pinName === \"\") {\r\n      return \"invisible\";\r\n    } else {\r\n      return \"pinInfo\";\r\n    }\r\n  }\r\n\r\n  getCategory() {\r\n    if (this.state.pinOtherText !== '' && this.state.pinCategory === 'OTHER') {\r\n      return this.state.pinOtherText;\r\n    } else {\r\n      return this.state.pinCategory;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * renders the component\r\n   */\r\n  render() {\r\n    return(\r\n      <ApolloProvider client={client}>\r\n      <div id=\"contentContainer\">\r\n          <Query query={gql(`query { map(id: \"${id}\") {mapName creatorName createdAt description} }`)}>\r\n            {({ loading, error, data }) => {\r\n              if (loading) return \"\";\r\n              if (error) return `Error! ${error.message} --- (Hi this is me. Either you're trying to query a map that doesn't exist or this is my fault. Sorry!)`;\r\n              if (data) {\r\n                let mapName = 'Unnamed Map';\r\n                let creatorName = 'Anonymous Creator';\r\n                let description = '';\r\n                if (data.map.mapName !== null) {\r\n                    mapName = data.map.mapName\r\n                }\r\n                if (data.map.creatorName !== null) {\r\n                    creatorName = data.map.creatorName\r\n                }\r\n                if (data.map.description !== null) {\r\n                    description = data.map.description\r\n                }\r\n                return <div className=\"mapInfo\">\r\n                  <div className=\"mapDetailsLeft\">\r\n                    <div className=\"mapTitle\">{mapName} by {creatorName}</div>\r\n                    <div className=\"mapDetails\">Created at: {data.map.createdAt}</div>\r\n                    <div className=\"mapDetails\">Map ID: {id}</div>\r\n                  </div>\r\n                  <div className=\"mapDescriptionContainer\">\r\n                    <div className=\"mapDescription\">{description}</div>\r\n                  </div>\r\n                </div>;\r\n              }\r\n            }}  \r\n          </Query>\r\n          <Query query={gql(`query {pointList(size: 50, query:{ mapId: \"${id}\"}) {name coordinates {x y} description category otherText} }`)}>\r\n            {({ loading, error, data }) => {\r\n              if (loading) return \"\";\r\n              if (error) return `Error! ${error.message}`;\r\n              if (data) {\r\n                const pins = data.pointList.map(p => {\r\n                  let pin = new Pin(p.coordinates.x, p.coordinates.y, p.name, p.description, p.category, p.otherText);\r\n                  return pin;\r\n                });\r\n                return <div id=\"viewMapContainer\">\r\n                <div id=\"mapImageContainer\">\r\n                  <img id=\"mapImage\"\r\n                    alt=\"a map\"\r\n                    src={process.env.PUBLIC_URL + '/collegeHillMap2.png'} />\r\n                  {pins.map(pin => this.drawPin(pin, pins))}\r\n                </div>\r\n                <div className={'pinInfo'}>\r\n                  <div className=\"pinName\">{this.state.pinName}</div>\r\n                  <div className=\"pinCategory\">{this.getCategory()}</div>\r\n                  <div className=\"pinDescription\">{this.state.pinDescription}</div>\r\n                </div>\r\n              </div>;\r\n              }\r\n            }}  \r\n          </Query>\r\n        </div>\r\n    </ApolloProvider>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport '../css/about.css';\r\n\r\n// Component class\r\nexport default class About extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  /**\r\n   * renders the component\r\n   */\r\n  render() {\r\n    return <div id=\"aboutContainer\">\r\n      <div id=\"aboutTitle\">About</div>\r\n      <div id=\"aboutContents\">\r\n        <div className='aboutParagraph'>In <i>The Image of the City</i>, Kevin Lynch used cognitive mapping to study how a city’s residents engaged with and experienced the urban environment. By studying the maps people produce, what they include, prioritize, and neglect, it is possible to gain some understanding into how those people perceive and experience their shared environment.</div>\r\n        <div className='aboutParagraph'>Despite the fact that all of a city’s residents occupy the same physical space, each person’s experience of the city is different, and each an invaluable piece of a city’s heritage. The College Hill Digital Cognitive Mapping Project is an attempt to record and preserve that heritage. It’s aim is to create a toolset for people to document and share and collate their experiences of College Hill and for researchers to study that data.</div>\r\n        <div className='aboutParagraph'>This project draws heavily on the work of many other people. This project is particularly indebted to the exhibit <a className=\"aboutLink\" href=\"https://www.districtsix.co.za/permanent-exhibition-digging-deeper/\">Digging Deeper</a> at the <a className=\"aboutLink\" href=\"http://cargocollective.com/MacGregorRechicoProjects/Map-It-Out\">District Six Museum</a> in Cape Town, South Africa, and the exhibition <a className=\"aboutLink\" href=\"http://cargocollective.com/MacGregorRechicoProjects/Map-It-Out\">Map It Out - Providence</a> by <a className=\"aboutLink\" href=\"http://www.gwenmacgregor.com/\">Gwen MacGregor</a> and <a className=\"aboutLink\" href=\"http://www.sandrarechico.com/index.html\">Sandra Rechico</a>. This project would also not have been possible without the help of my teachers Dr. Lauran Yapp and Emily Booker.</div>\r\n      </div>\r\n    </div>;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { ApolloClient } from 'apollo-boost';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { ApolloProvider, Query } from 'react-apollo';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { setContext } from 'apollo-link-context';\r\nimport { Token, Endpoint } from '../authorization';\r\nimport gql from \"graphql-tag\";\r\nimport \"../css/archive.css\"\r\n\r\n// Setup Client\r\nconst authLink = setContext((_, { headers }) => {\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: Token ? `${Token}` : ''\r\n        },\r\n    };\r\n});\r\nconst clientCache = new InMemoryCache();\r\nconst clientLink = new HttpLink({\r\n    uri: Endpoint,\r\n});\r\nconst client = new ApolloClient({\r\n    cache: clientCache,\r\n    link: authLink.concat(clientLink),\r\n});\r\n\r\n// Component Class\r\nexport default class Archive extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            size: 10,\r\n            backClass: 'invisible',\r\n        };\r\n    }\r\n    getForthClass(i) {\r\n        if (i === this.state.size) {\r\n            return 'archiveButton';\r\n        } else {\r\n            return 'invisible';\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <ApolloProvider client={client}>\r\n                <div>\r\n                    <div className=\"archiveSearchContainer\"></div>\r\n                    <div id=\"contentContainer\">\r\n                        <Query query={gql(`query { mapList(size: ${this.state.size}, page: ${this.state.page}) {id mapName creatorName createdAt description}}`)}>\r\n                            {({ loading, error, data }) => {\r\n                                if (loading) return \"\";\r\n                                if (error) return `Error! ${error.message}`;\r\n                                if (data) {\r\n                                    return <div className=\"archiveContent\">\r\n                                        {Array.from(data.mapList).map(m => {\r\n                                            let mapName = 'Unnamed Map';\r\n                                            let creatorName = 'Anonymous Creator';\r\n                                            let description = '';\r\n                                            if (m.mapName !== null) {\r\n                                                mapName = m.mapName\r\n                                            }\r\n                                            if (m.creatorName !== null) {\r\n                                                creatorName = m.creatorName\r\n                                            }\r\n                                            if (m.description !== null) {\r\n                                                description = m.description\r\n                                            }\r\n                                            return (\r\n                                                <div key={m.id} className=\"archiveEntryContainer\">\r\n                                                    <div className=\"archiveLeftContainer\">\r\n                                                        <div className=\"archiveTitleContainer\">{mapName} by {creatorName}</div>\r\n                                                        <div className=\"archiveDateContainer\">{m.createdAt}</div>\r\n                                                        <div className=\"archiveLinkContainer\">\r\n                                                            <a className=\"stdLink\" href={`./page=viewmap:${m.id}`}>View Map</a></div>\r\n                                                    </div>\r\n                                                    <div className=\"archiveRightContainer\">{description}</div>\r\n                                                </div>);\r\n                                        })}\r\n                                        <div className=\"archiveButtonContainer\">\r\n                                            <button className={this.state.backClass}\r\n                                                onClick={() => {\r\n                                                    if (this.state.page === 1) {\r\n                                                        this.setState({ page: this.state.page - 1, backClass: \"invisible\" });\r\n                                                    } else {\r\n                                                        this.setState({ page: this.state.page - 1 });\r\n\r\n                                                    }\r\n                                                }}>« Back</button>\r\n                                            <button className={this.getForthClass(Array.from(data.mapList).length)} \r\n                                            onClick={() => this.setState({ page: this.state.page + 1, backClass: \"archiveButton\" })}>\r\n                                                Forth »</button>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            }}\r\n                        </Query>\r\n                    </div>\r\n                </div>\r\n            </ApolloProvider>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ApolloClient } from 'apollo-boost';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { ApolloProvider, Query } from 'react-apollo';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { setContext } from 'apollo-link-context';\r\nimport { Token, Endpoint } from '../authorization';\r\nimport gql from \"graphql-tag\";\r\nimport '../css/viewmap.css';\r\n\r\n// Setup Client\r\nconst authLink = setContext((_, { headers }) => {\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: Token ? `${Token}` : ''\r\n        },\r\n    };\r\n});\r\nconst clientCache = new InMemoryCache();\r\nconst clientLink = new HttpLink({\r\n    uri: Endpoint,\r\n});\r\nconst client = new ApolloClient({\r\n    cache: clientCache,\r\n    link: authLink.concat(clientLink),\r\n});\r\n\r\n// internal pin class\r\nclass Pin {\r\n    constructor(x, y, name, creator, description, category, otherText, mapId) {\r\n        this.key = `pin:x${String(x)},y${String(y)}map:${mapId}`;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.name = name;\r\n        this.creator = creator;\r\n        this.description = description;\r\n        this.category = category;\r\n        this.otherText = otherText;\r\n        this.mapId = mapId;\r\n    }\r\n}\r\n\r\n// Component class\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pinName: \"\",\r\n            pinCreator: \"\",\r\n            pinCategory: \"\",\r\n            pinOtherText: \"\",\r\n            pinDescription: \"\",\r\n            pinMapId: \"\",\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Draws a given pin to the map\r\n     * @param pin<Pin>The pin to be drawn\r\n     * @param pins<[Pin]>all of the pins!\r\n     */\r\n    drawPin(pin, pins) {\r\n        return <div key={pin.key}\r\n            className=\"mapPin\"\r\n            style={{ left: String(pin.x - 6) + \"px\", top: String(pin.y - 6) + \"px\", }}>\r\n            <button className=\"mapPinMarker\"\r\n                onClick={() => {\r\n                    pins.forEach(p => {\r\n                        if (p.key === pin.key) {\r\n                            this.setState({\r\n                                pinName: p.name, pinCreator: p.creator,\r\n                                pinDescription: p.description, pinCategory: p.category,\r\n                                pinOtherText: p.otherText, pinMapId: p.mapId\r\n                            });\r\n                        }\r\n                    });\r\n                }} />\r\n            <div className=\"mapPinName\">{pin.name}</div>\r\n        </div>;\r\n    }\r\n\r\n    getPinInfoClassName() {\r\n        if (this.state.pinName === \"\") {\r\n            return \"invisible\";\r\n        } else {\r\n            return \"pinLinkContainer\";\r\n        }\r\n    }\r\n\r\n    getCategory() {\r\n        if (this.state.pinOtherText !== '' && this.state.pinCategory === 'OTHER') {\r\n            return this.state.pinOtherText;\r\n        } else {\r\n            return this.state.pinCategory;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * renders the component\r\n     */\r\n    render() {\r\n        return (\r\n            <ApolloProvider client={client}>\r\n                <div id=\"contentContainer\">\r\n                    <div id=\"prompt\">Click on a pin to view it's data...</div>\r\n                    <Query query={gql(`query {pointList(size: 50, query:{ random: true}) {name creatorName coordinates {x y} description category otherText mapId} }`)}>\r\n                        {({ loading, error, data }) => {\r\n                            if (loading) return \"Loading...\";\r\n                            if (error) return `Error! ${error.message}`;\r\n                            if (data) {\r\n                                var pins = new Set();\r\n                                data.pointList.forEach(p => {\r\n                                    let pin = new Pin(p.coordinates.x, p.coordinates.y, p.name, p.creatorName, p.description, p.category, p.otherText, p.mapId);\r\n                                    pins.add(pin);\r\n                                });\r\n                                let pinArray = Array.from(pins);\r\n                                return <div id=\"viewMapContainer\">\r\n                                    <div id=\"mapImageContainer\">\r\n                                        <img id=\"mapImage\"\r\n                                            alt=\"a map\"\r\n                                            src={process.env.PUBLIC_URL + '/collegeHillMap2.png'} />\r\n                                        {pinArray.map(pin => this.drawPin(pin, pinArray))}\r\n                                    </div>\r\n                                    <div className={'pinInfo'}>\r\n                                        <div className=\"pinName\">{this.state.pinName}</div>\r\n                                        <div className=\"pinCreator\">{this.state.pinCreator}</div>\r\n                                        <div className=\"pinCategory\">{this.getCategory()}</div>\r\n                                        <div className=\"pinDescription\">{this.state.pinDescription}</div>\r\n                                        <div className={this.getPinInfoClassName()}>\r\n                                            Original Map: <a className=\"stdLink\" href={`./page=viewmap:${this.state.pinMapId}`}>{`id:${this.state.pinMapId}`}</a>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>;\r\n                            }\r\n                        }}\r\n                    </Query>\r\n                </div>\r\n            </ApolloProvider>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport '../css/research.css';\r\n\r\n\r\n// Component class\r\nexport default class Research extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    };\r\n\r\n  render() {\r\n    return <div id=\"researchContainer\">\r\n        <div className=\"researchTextContainer\">One of the primary goals of the College Hill Digital Cognitive Mapping Project was to create a toolset that would be easy for researchers and developers to use. As such, this project is built on top of a publicly available <a className='stdLink' href=\"https://graphql.org/\">GraphQL</a> which includes a number of features intended to make the dataset easily accessible to people from a wide variety of backgrounds.</div>\r\n       <div id=\"tryButtonContainer\">\r\n          <a href=\"https://dcmp-server.herokuapp.com/\"><button className=\"tryButton\">Try it out in the Playground</button></a>\r\n          <a href=\"\"><button className=\"tryButton\">Read our Documentation (beta)</button></a>\r\n       </div>\r\n    </div>;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport '../css/footer.css';\r\n\r\n\r\n// Component class\r\nexport default class PageFooter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    };\r\n\r\n  render() {\r\n    return <div id=\"footerContainer\">\r\n        <div id=\"footer\"></div>\r\n    </div>;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PageHeader from './components/PageHeader';\r\nimport EditMap from './components/EditMap';\r\nimport ViewMap from './components/ViewMap';\r\nimport About from './components/About';\r\nimport Archive from './components/Archive';\r\nimport Home from './components/Home';\r\nimport Research from './components/Research';\r\nimport PageFooter from './components/PageFooter';\r\nimport './css/index.css';\r\nimport './css/webfonts/ingram-mono-regular.css';\r\n\r\nfunction App() {\r\n  // Get Page Text (used to determine which page to rener)\r\n  const splited = window.location.href.split('page=');\r\n  let pageText;\r\n  if (splited.length === 2) {\r\n    pageText = splited[1];\r\n  } else {\r\n    pageText = '';\r\n  }\r\n  // determine what to render\r\n  let pageContent;\r\n  if (pageText.includes('viewmap:')) {\r\n    pageContent = <ViewMap />;\r\n  }\r\n  if (pageText.includes('editmap')) {\r\n    pageContent = <EditMap />;\r\n  }\r\n  if (pageText.includes('archive')) {\r\n    pageContent = <Archive />;\r\n  }\r\n  if (pageText.includes('about')) {\r\n    pageContent = <About />;\r\n  }\r\n  if (pageText.includes('research')) {\r\n    pageContent = <Research />;\r\n  }\r\n  if (!pageContent) {\r\n    pageContent = <Home />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <PageHeader />\r\n      <div id=\"pageContentContainer\">\r\n        {pageContent}\r\n      </div>\r\n      <PageFooter />\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}